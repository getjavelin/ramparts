name: Cloud E2E - Ramparts

on:
  schedule:
    - cron: '30 1 * * 1,2,3,4,5'  # Daily at 1:30 AM UTC = 7:00 AM IST
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  javelin-e2e:
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build for integration tests
        run: cargo build --release

      - name: Run integration tests
        run: |
          # Test CLI help
          ./target/release/ramparts --help
          
          # Test init-config command
          ./target/release/ramparts init-config --force
          
          # Test server startup and shutdown with proper cleanup
          echo "Testing server startup and shutdown..."
          # Start server in background and capture PID
          ./target/release/ramparts server --port 3000 & SERVER_PID=$!
          echo "Server started with PID: $SERVER_PID"
          
          # Wait for server to start (max 10 seconds)
          sleep 2
          
          # Test if server is responding
          if curl -s http://localhost:3000/health > /dev/null 2>&1; then
            echo "✅ Server is responding on port 3000"
          else
            echo "❌ Server not responding on port 3000"
            exit 1
          fi
          
          # Kill server gracefully
          kill $SERVER_PID 2>/dev/null || true
          
          # Wait for graceful shutdown (max 5 seconds)
          for i in 1 2 3 4 5; do
            if ! kill -0 $SERVER_PID 2>/dev/null; then
              echo "✅ Server shutdown gracefully"
              break
            fi
            sleep 1
          done
          
          # Force kill if still running
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "⚠️  Force killing server process"
            kill -9 $SERVER_PID 2>/dev/null || true
          fi
          
          # Clean up any remaining processes
          pkill -f "ramparts server" 2>/dev/null || true