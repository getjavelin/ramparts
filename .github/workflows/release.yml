name: Release Build - Ramparts and Javelin Ramparts Server

on:
  release:
    types:
      - published

env:
  PY_VER: 3.11.8
  RELEASE_BRANCH: "main"
  REGEX_PATTERN: "^[0-9]+\\.[0-9]+\\.[0-9]+$"
  RELEASE_NAME: ${{ github.event.release.name }}
  DEVOPS_REPO: "javelin-cloud"
  DEVOPS_BRANCH: "main"
  RELEASE_TRIGGER: "enable"
  RELEASE_WORKFLOW: "trigger-release-deploy-ramparts-server.yml"

jobs:
  reusable-vars:
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: reusable variables
        run: echo "Exposing env vars"
    outputs:
      RELEASE_TRIGGER: ${{ env.RELEASE_TRIGGER }}

  javelin-validate:
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Validate Release Branch
        id: validate_branch
        shell: bash
        run: |-
          export TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref_name }})
          export TAG_BRANCH=$(git branch -r --contains ${TAG_COMMIT} | grep -v HEAD | head -n 1 | sed 's/origin\///' | sed 's/^[ \t]*//')
          if [[ "${TAG_BRANCH}" == "${{ env.RELEASE_BRANCH }}" ]] ; then
            echo "Valid Branch for Release : ${TAG_BRANCH}"
            echo "enable_branch_build=true" >> ${GITHUB_OUTPUT}
          else
            echo "Invalid Branch for Release : ${TAG_BRANCH}"
            echo "enable_branch_build=false" >> ${GITHUB_OUTPUT}
            exit 1
          fi

      - name: Validate Release Tag
        if: ${{ steps.validate_branch.outputs.enable_branch_build == 'true' }}
        id: validate_tag
        shell: bash
        run: |-
          if [[ "${{ env.RELEASE_NAME }}" =~ ${{ env.REGEX_PATTERN }} ]] ; then
            echo "Valid version format: ${{ env.RELEASE_NAME }}"
            echo "enable_tag_build=true" >> ${GITHUB_OUTPUT}
          else
            echo "Invalid version format: ${{ env.RELEASE_NAME }}"
            echo "enable_tag_build=false" >> ${GITHUB_OUTPUT}
            exit 1
          fi

      - name: Setting up the Crate Version
        shell: bash
        run: |-
          sed -i 's/^version = ".*"/version = "${{ env.RELEASE_NAME }}"/' Cargo.toml

      - name: Upload cargo-toml
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cargo-toml
          path: Cargo.toml
          retention-days: 1

  javelin-artifact:
    needs:
      - javelin-validate
    permissions:
      contents: 'read'
    strategy:
      matrix:
        include:
          - target: ubuntu-24.04
            arch: x86_64
          - target: windows-2022
            arch: x86_64
          - target: macOS-15
            arch: x86_64
          - target: macOS-15
            arch: aarch64
    runs-on: ${{ matrix.target }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Download cargo-toml
        uses: actions/download-artifact@v4
        with:
          name: cargo-toml

      - name: Check Cargo.toml
        shell: bash
        run: |-
          cat Cargo.toml

      - name: Setting up Envs
        id: set_env
        shell: bash
        run: |-
          if [[ ${{ matrix.target }} == "ubuntu-24.04" && ${{ matrix.arch }} == "x86_64" ]] ; then
            echo "crate_target=x86_64-unknown-linux-gnu" >> ${GITHUB_OUTPUT}
            echo "crate_release=ramparts-linux-x86_64" >> ${GITHUB_OUTPUT}
            echo "crate_ext=" >> ${GITHUB_OUTPUT}
          elif [[ ${{ matrix.target }} == "windows-2022" && ${{ matrix.arch }} == "x86_64" ]] ; then
            echo "crate_target=x86_64-pc-windows-msvc" >> ${GITHUB_OUTPUT}
            echo "crate_release=ramparts-windows-x86_64.exe" >> ${GITHUB_OUTPUT}
            echo "crate_ext=.exe" >> ${GITHUB_OUTPUT}
          elif [[ ${{ matrix.target }} == "macOS-15" && ${{ matrix.arch }} == "x86_64" ]] ; then
            echo "crate_target=x86_64-apple-darwin" >> ${GITHUB_OUTPUT}
            echo "crate_release=ramparts-macos-x86_64" >> ${GITHUB_OUTPUT}
            echo "crate_ext=" >> ${GITHUB_OUTPUT}
          elif [[ ${{ matrix.target }} == "macOS-15" && ${{ matrix.arch }} == "aarch64" ]] ; then
            echo "crate_target=aarch64-apple-darwin" >> ${GITHUB_OUTPUT}
            echo "crate_release=ramparts-macos-aarch64" >> ${GITHUB_OUTPUT}
            echo "crate_ext=" >> ${GITHUB_OUTPUT}
          else
            echo "Not matching the target...!"
            exit 1
          fi

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ steps.set_env.outputs.crate_target }}

      - name: Install YARA (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y yara libyara-dev

      - name: Install YARA (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install yara
          # Set environment variables for yara-sys
          echo "YARA_LIBRARY_PATH=/opt/homebrew/lib" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/opt/homebrew/include" >> $GITHUB_ENV
          # Also set for Intel Macs
          if [ -d "/usr/local/lib" ]; then
            echo "YARA_LIBRARY_PATH=/usr/local/lib" >> $GITHUB_ENV
            echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/local/include" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Install YARA (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows doesn't have a standard YARA package manager
          # We'll build without YARA features for Windows
          echo "YARA not available on Windows, will build without YARA features"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build release binaries
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cargo build --release --target ${{ steps.set_env.outputs.crate_target }} --no-default-features
          else
            cargo build --release --target ${{ steps.set_env.outputs.crate_target }}
          fi
        shell: bash

      - name: Create release assets
        run: |
          mkdir -p release
          cp target/${{ steps.set_env.outputs.crate_target }}/release/ramparts${{ steps.set_env.outputs.crate_ext }} release/${{ steps.set_env.outputs.crate_release }}

          # Create checksums
          cd release
          sha256sum * > ${{ matrix.target }}-${{ matrix.arch }}_checksums.txt
        shell: bash

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOPS_GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release/${{ steps.set_env.outputs.crate_release }}
          asset_name: ${{ steps.set_env.outputs.crate_release }}
          asset_content_type: application/octet-stream

      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOPS_GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./release/${{ matrix.target }}-${{ matrix.arch }}_checksums.txt
          asset_name: ${{ matrix.target }}-${{ matrix.arch }}_checksums.txt
          asset_content_type: text/plain

  javelin-crate:
    needs:
      - javelin-validate
      - javelin-artifact
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Download cargo-toml
        uses: actions/download-artifact@v4
        with:
          name: cargo-toml

      - name: Check Cargo.toml
        shell: bash
        run: |-
          cat Cargo.toml

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install YARA (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y yara libyara-dev

      - name: Install YARA (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install yara
          # Set environment variables for yara-sys
          echo "YARA_LIBRARY_PATH=/opt/homebrew/lib" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/opt/homebrew/include" >> $GITHUB_ENV
          # Also set for Intel Macs
          if [ -d "/usr/local/lib" ]; then
            echo "YARA_LIBRARY_PATH=/usr/local/lib" >> $GITHUB_ENV
            echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/local/include" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Install YARA (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows doesn't have a standard YARA package manager
          # We'll build without YARA features for Windows
          echo "YARA not available on Windows, will build without YARA features"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Publish to Crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |-
          cargo publish --allow-dirty Cargo.toml --allow-dirty Cargo.lock

  javelin-trigger:
    needs:
      - reusable-vars
      - javelin-crate
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-24.04
    if: (needs.reusable-vars.outputs.RELEASE_TRIGGER == 'enable')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install GitHub CLI
        run: sudo apt install gh -y

      - name: Trigger private repo workflow
        env:
          GITHUB_TOKEN: ${{ secrets.DEVOPS_GITHUB_TOKEN }}
        run: |
          gh workflow run ${{ env.CICD_WORKFLOW }} \
            --repo ${{ github.repository_owner }}/${{ env.DEVOPS_REPO }} \
            --ref ${{ env.DEVOPS_BRANCH }} -f RELEASE_TAG=${{ env.RELEASE_NAME }}
